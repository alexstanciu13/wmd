import express from 'express';
import cors from 'cors';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Create email transporter for Zoho Mail
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST || 'smtp.zoho.eu',
  port: Number(process.env.SMTP_PORT) || 465,
  secure: process.env.SMTP_SECURE === 'true' || true, // true for port 465
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// Verify transporter configuration
transporter.verify((error, success) => {
  if (error) {
    console.error('SMTP configuration error:', error);
  } else {
    console.log('SMTP server is ready to send emails');
  }
});

// Helper function to format project type
const formatProjectType = (type) => {
  const types = {
    'web-design': 'Design Web',
    'ecommerce': 'E-Commerce',
    'seo': 'SEO',
    'marketing': 'Marketing Digital',
    'email-marketing': 'E-mail Marketing',
    'branding': 'Branding',
    'ai-automation': 'Automatizare AI',
    'comprehensive': 'Pachet Complet',
  };
  return types[type] || type;
};

// Helper function to format timeline
const formatTimeline = (timeline) => {
  const timelines = {
    'asap': 'CÃ¢t mai curÃ¢nd (1 sÄƒptÄƒmÃ¢nÄƒ)',
    '1-3': '1-3 sÄƒptÄƒmÃ¢ni',
    '3-6': '3-6 sÄƒptÄƒmÃ¢ni',
    '6+': '6+ sÄƒptÄƒmÃ¢ni',
  };
  return timelines[timeline] || timeline;
};

// Helper function to sanitize input
const sanitizeInput = (input) => {
  if (typeof input !== 'string') return input;
  return input.replace(/[<>]/g, '');
};

// Helper function to load and populate email template
const getEmailTemplate = (data) => {
  try {
    const templatePath = path.join(__dirname, 'email-templates', 'application-confirmation.html');
    let template = fs.readFileSync(templatePath, 'utf-8');

    // Replace placeholders with actual data
    template = template.replace(/{{name}}/g, data.name);
    template = template.replace(/{{company}}/g, data.company);
    template = template.replace(/{{projectType}}/g, formatProjectType(data.projectType));
    template = template.replace(/{{budget}}/g, Number(data.budget).toLocaleString('ro-RO'));
    template = template.replace(/{{timeline}}/g, formatTimeline(data.timeline));

    return template;
  } catch (error) {
    console.error('Error loading email template:', error);
    return null;
  }
};

// API endpoint for form submission
app.post('/api/submit-application', async (req, res) => {
  try {
    const {
      name,
      email,
      phone,
      company,
      website,
      budget,
      projectType,
      timeline,
      description,
    } = req.body;

    // Basic validation
    if (!name || !email || !phone || !company || !budget || !projectType || !timeline || !description) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: 'Invalid email format' });
    }

    // Validate budget is a number
    if (isNaN(Number(budget)) || Number(budget) <= 0) {
      return res.status(400).json({ error: 'Invalid budget value' });
    }

    // Sanitize all inputs
    const sanitizedData = {
      name: sanitizeInput(name),
      email: sanitizeInput(email),
      phone: sanitizeInput(phone),
      company: sanitizeInput(company),
      website: sanitizeInput(website),
      budget: sanitizeInput(budget),
      projectType: sanitizeInput(projectType),
      timeline: sanitizeInput(timeline),
      description: sanitizeInput(description),
    };

    // Format budget with thousands separator and EUR symbol
    const formattedBudget = `${Number(sanitizedData.budget).toLocaleString('ro-RO')} â‚¬`;

    // Create email content
    const emailContent = `Ai primit o cerere nouÄƒ de colaborare:

Nume:        ${sanitizedData.name}
Email:       ${sanitizedData.email}
Telefon:     ${sanitizedData.phone}
Companie:    ${sanitizedData.company}
Website:     ${sanitizedData.website}
Buget:       ${formattedBudget}
Tip Proiect: ${formatProjectType(sanitizedData.projectType)}
Cronologie:  ${formatTimeline(sanitizedData.timeline)}

Mesaj:
${sanitizedData.description}

--
Formular Aplica Acum
Web Media Design
contact@webmediadesign.ro`;

    // Email options for internal notification
    const internalMailOptions = {
      from: process.env.SMTP_FROM || 'Web Media Design <contact@webmediadesign.ro>',
      to: 'contact@webmediadesign.ro',
      subject: 'NouÄƒ cerere de colaborare â€” Web Media Design',
      text: emailContent,
      replyTo: sanitizedData.email,
    };

    // Send internal notification email
    await transporter.sendMail(internalMailOptions);
    console.log('Internal notification email sent successfully');

    // Send confirmation email to user
    const htmlTemplate = getEmailTemplate(sanitizedData);

    if (htmlTemplate) {
      const confirmationMailOptions = {
        from: process.env.SMTP_FROM || 'Web Media Design <contact@webmediadesign.ro>',
        to: sanitizedData.email,
        subject: 'AplicaÈ›ia ta a fost primitÄƒ â€” Web Media Design',
        html: htmlTemplate,
        // Fallback text version
        text: `BunÄƒ ${sanitizedData.name},

MulÈ›umim pentru interesul tÄƒu de a colabora cu Web Media Design. Am primit cu succes aplicaÈ›ia ta È™i suntem entuziasmaÈ›i sÄƒ aflÄƒm mai multe despre proiectul tÄƒu!

CE URMEAZÄ‚?

1. Revizuire AplicaÈ›ie
   Echipa noastrÄƒ analizeazÄƒ detaliile È™i cerinÈ›ele proiectului tÄƒu

2. Apel Descoperire
   Vom programa o sesiune de strategie pentru a discuta viziunea ta

3. Propunere PersonalizatÄƒ
   PrimeÈ™ti o strategie adaptatÄƒ È™i un plan detaliat al proiectului

ðŸ“… Te vom contacta Ã®n 24â€“48 de ore

DETALII APLICAÈšIE:
Companie: ${sanitizedData.company}
Tip proiect: ${formatProjectType(sanitizedData.projectType)}
Buget: ${formattedBudget}
Cronologie: ${formatTimeline(sanitizedData.timeline)}

Ai Ã®ntrebÄƒri? Ne poÈ›i contacta la contact@webmediadesign.ro

Â© 2025 Web Media Design. Toate drepturile rezervate.
ExcelenÈ›Äƒ DigitalÄƒ Premium`,
      };

      try {
        await transporter.sendMail(confirmationMailOptions);
        console.log('Confirmation email sent to user successfully');
      } catch (confirmationError) {
        console.error('Error sending confirmation email to user:', confirmationError);
        // Don't fail the request if confirmation email fails
      }
    }

    res.status(200).json({ success: true, message: 'Application submitted successfully' });

  } catch (error) {
    console.error('Error processing form submission:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ status: 'ok' });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
